#set(CO_ASYNC_MODULE ON)
set(CO_ASYNC_DEBUG ON)

if (CO_ASYNC_MODULE)
    cmake_minimum_required(VERSION 3.28)
else()
    cmake_minimum_required(VERSION 3.18)
endif()

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

project(co_async LANGUAGES CXX)

if (CO_ASYNC_CUDA)
    enable_language(CUDA)
endif()

if (MSVC)
    add_compile_options($<$<COMPILE_LANG_AND_ID:CXX,MSVC>:-utf-8>)
endif()
include(cmake/clang_std_modules.cmake)

add_library(co_async OBJECT)
if (CO_ASYNC_MODULE)
    enable_std_modules(co_async)
endif()
file(GLOB_RECURSE interface_sources co_async/*.cppm)
file(GLOB_RECURSE implementation_sources co_async/*.cpp)
if (CO_ASYNC_MODULE)
    target_sources(co_async PUBLIC FILE_SET CXX_MODULES FILES ${interface_sources})
else()
    # target_sources(co_async PUBLIC FILE_SET HEADERS FILES ${interface_sources})
    # target_sources(co_async PUBLIC FILE_SET HEADERS FILES cmake/clang_std_modules_source/std.hpp)
    target_include_directories(co_async PUBLIC .)
endif()
target_sources(co_async PRIVATE ${implementation_sources})
if (CO_ASYNC_DEBUG)
     target_compile_definitions(co_async PUBLIC CO_ASYNC_DEBUG)
endif()
if (CO_ASYNC_PERF)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_PERF)
endif()
if (CO_ASYNC_EXCEPT)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_EXCEPT)
endif()

if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    target_sources(co_async PRIVATE arch/linux/liburing/liburing.cpp)
    target_include_directories(co_async PUBLIC arch/linux/liburing/include)
endif()

if (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    file(GLOB example_sources examples/*.cpp)
    foreach(path ${example_sources})
        get_filename_component(name ${path} NAME_WE)
        add_executable(${name} ${path})
        if (CO_ASYNC_MODULE)
            enable_std_modules(${name})
        endif()
        target_link_libraries(${name} PRIVATE co_async)
    endforeach()
endif()
