#set(CO_ASYNC_MODULE ON)
#set(CO_ASYNC_DEBUG ON)
#set(CO_ASYNC_SAFERET ON)
#set(CO_ASYNC_ALLOC ON)
#set(CO_ASYNC_PERF ON)
#set(CO_ASYNC_EXCEPT ON)
#set(CO_ASYNC_ZLIB ON)
#set(CO_ASYNC_STEAL ON)
#set(CO_ASYNC_CUDA ON)
#set(CO_ASYNC_DIRECT ON)
set(CO_ASYNC_NATIVE ON)
#set(CO_ASYNC_FIND_LIBURING ON)
#set(CO_ASYNC_FIND_BEARSSL ON)
#set(CO_ASYNC_JEMALLOC ON)

if (CO_ASYNC_MODULE)
    cmake_minimum_required(VERSION 3.28)
else()
    cmake_minimum_required(VERSION 3.16)
endif()

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if (CMAKE_BUILD_TYPE MATCHES "Debug" AND NOT DEFINED CO_ASYNC_DEBUG)
    set(CO_ASYNC_DEBUG ON)
endif()

project(co_async LANGUAGES CXX)

if (CO_ASYNC_CUDA)
    enable_language(CUDA)
endif()

if (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    if (MSVC)
        add_compile_options($<$<CXX_COMPILER_ID:MSVC>:-utf-8$<SEMICOLON>-Zc:preprocessor$<SEMICOLON>-permissive-$<SEMICOLON>-EHsc>)
        add_compile_definitions($<CXX_COMPILER_ID:MSVC>:-DNOMINMAX>)
    else()
        add_compile_options($<$<CXX_COMPILER_ID:GNU,Clang>:-Wall$<SEMICOLON>-Wextra$<SEMICOLON>-Wno-interference-size$<SEMICOLON>-Werror=return-type$<SEMICOLON>-Werror=unused-result$<SEMICOLON>-Werror=uninitialized$<SEMICOLON>-Werror=maybe-uninitialized$<SEMICOLON>-Wno-unused-parameter$<SEMICOLON>-Wunused-but-set-variable$<SEMICOLON>-Wunused-but-set-parameter$<SEMICOLON>-Wunused-function$<SEMICOLON>-Wunused-const-variable$<SEMICOLON>-Werror=use-after-free=3$<SEMICOLON>-Werror=invalid-memory-model$<SEMICOLON>-Wunused-value$<SEMICOLON>-Wexceptions$<SEMICOLON>-Werror=missing-declarations$<SEMICOLON>-Werror=missing-field-initializers$<SEMICOLON>-Wparentheses$<SEMICOLON>-Wconversion$<SEMICOLON>-Werror=float-conversion$<SEMICOLON>-Wsign-conversion$<SEMICOLON>-Wsign-compare$<SEMICOLON>-Wno-terminate$<SEMICOLON>-Werror=delete-non-virtual-dtor$<SEMICOLON>-Werror=suggest-override$<SEMICOLON>-Wsign-promo$<SEMICOLON>-Wold-style-cast$<SEMICOLON>-Wrange-loop-construct$<SEMICOLON>-Werror=reorder$<SEMICOLON>-Werror=class-memaccess$<SEMICOLON>-Werror=narrowing$<SEMICOLON>-Wenum-conversion$<SEMICOLON>-Wdeprecated-enum-enum-conversion$<SEMICOLON>-Werror=deprecated-copy-dtor$<SEMICOLON>-Werror=deprecated-copy$<SEMICOLON>-Wzero-as-null-pointer-constant$<SEMICOLON>-Wplacement-new=2$<SEMICOLON>-Wsuggest-final-types$<SEMICOLON>-Wsuggest-final-methods$<SEMICOLON>-Werror=conversion-null$<SEMICOLON>-Werror=mismatched-new-delete$<SEMICOLON>-Werror=address$<SEMICOLON>-Wlogical-op$<SEMICOLON>-Wlogical-not-parentheses$<SEMICOLON>-Wattributes$<SEMICOLON>-Wmissing-declarations$<SEMICOLON>-Werror=multichar$<SEMICOLON>-Werror=overflow$<SEMICOLON>-Werror=restrict$<SEMICOLON>-Werror=vla$<SEMICOLON>-Werror=strict-aliasing=1$<SEMICOLON>-Werror=string-compare$<SEMICOLON>-Werror=stringop-overflow=2$<SEMICOLON>-Werror=shift-overflow$<SEMICOLON>-Wsuggest-attribute=const$<SEMICOLON>-Wsuggest-attribute=pure$<SEMICOLON>-Wsuggest-attribute=noreturn$<SEMICOLON>-Werror=alloca$<SEMICOLON>-Werror=array-bounds$<SEMICOLON>-Werror=bool-compare$<SEMICOLON>-Werror=bool-operation$<SEMICOLON>-Werror=zero-length-bounds$<SEMICOLON>-Werror=div-by-zero$<SEMICOLON>-Wno-shadow$<SEMICOLON>-Werror=format$<SEMICOLON>-Werror=pointer-arith$<SEMICOLON>-Werror=write-strings$<SEMICOLON>-Werror=dangling-pointer=2$<SEMICOLON>-Werror=return-local-addr$<SEMICOLON>-Wempty-body$<SEMICOLON>-Wimplicit-fallthrough$<SEMICOLON>-Wswitch$<SEMICOLON>-Wno-unknown-warning-option>)
        add_compile_options($<$<CXX_COMPILER_ID:GNU,Clang>:-Werror>)
        if (CO_ASYNC_DEBUG)
            add_compile_options($<$<CXX_COMPILER_ID:GNU,Clang>:-Wno-exceptions>)
        endif()
        add_link_options($<$<CXX_COMPILER_ID:GNU,Clang>:-flto>)
    endif()
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 10.0.0 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 11.0.0)
        add_compile_options($<$<COMPILE_LANG_AND_ID:CXX,GNU>:-Wno-error$<SEMICOLON>-fcoroutines$<SEMICOLON>-D__cplusplus=202002L>)
        if (IS_DIRECTORY /usr/include/c++/10)
            include_directories($<$<COMPILE_LANG_AND_ID:CXX,GNU>:/usr/include/c++/10>)
        endif()
    endif()
endif()
if (CO_ASYNC_MODULE)
    include(cmake/clang_std_modules.cmake)
endif()

add_library(co_async OBJECT)
if (CO_ASYNC_MODULE)
    enable_std_modules(co_async)
endif()
file(GLOB_RECURSE interface_sources co_async/*.hpp)
file(GLOB_RECURSE implementation_sources co_async/*.cpp)
if (CO_ASYNC_MODULE)
    target_sources(co_async PUBLIC FILE_SET CXX_MODULES FILES ${interface_sources})
else()
    # target_sources(co_async PUBLIC FILE_SET HEADERS FILES ${interface_sources})
    # target_sources(co_async PUBLIC FILE_SET HEADERS FILES cmake/clang_std_modules_source/std.hpp)
    target_include_directories(co_async PUBLIC .)
endif()
target_sources(co_async PRIVATE ${implementation_sources})
if (NOT implementation_sources)
    target_sources(co_async PRIVATE scripts/dummy.cpp)
endif()
if (CO_ASYNC_DEBUG)
     target_compile_definitions(co_async PUBLIC CO_ASYNC_DEBUG)
endif()
if (CO_ASYNC_SAFERET)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_SAFERET)
endif()
if (CO_ASYNC_ALLOC)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_ALLOC)
endif()
if (CO_ASYNC_PERF)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_PERF)
endif()
if (CO_ASYNC_EXCEPT)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_EXCEPT)
endif()
if (CO_ASYNC_ZLIB)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_ZLIB)
    # target_link_libraries(co_async PUBLIC z)
    find_package(ZLIB REQUIRED)
    target_link_libraries(co_async PUBLIC ZLIB::ZLIB)
endif()
if (CO_ASYNC_STEAL)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_STEAL)
endif()
if (CO_ASYNC_CUDA)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_CUDA)
    find_package(CUDA REQUIRED)
    target_link_libraries(co_async PUBLIC CUDA::CUDA)
endif()
if (CO_ASYNC_DIRECT)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_DIRECT)
endif()
if (CO_ASYNC_NATIVE)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_NATIVE)
    target_compile_options(co_async PRIVATE -march=native)
endif()

if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    if (CO_ASYNC_FIND_LIBURING)
        include(FindPkgConfig)
        pkg_check_modules(LIBURING liburing)
        if (NOT LIBURING_FOUND)
            find_path(LIBURING_INCLUDE_DIR NAMES liburing.h)
            find_library(LIBURING_LIBRARY NAMES liburing.a)
            if (NOT LIBURING_INCLUDE_DIR OR NOT LIBURING_LIBRARY)
                message(FATAL_ERROR "liburing not found")
            endif()
            set(LIBURING_LIBRARIES ${LIBURING_LIBRARY})
            set(LIBURING_INCLUDE_DIRS ${LIBURING_INCLUDE_DIR})
        endif()
        target_link_libraries(co_async PUBLIC ${LIBURING_LIBRARIES})
        target_include_directories(co_async PUBLIC ${LIBURING_INCLUDE_DIRS})
    else()
        target_sources(co_async PRIVATE 3rd/liburing/liburing.cpp)
        target_include_directories(co_async PUBLIC 3rd/liburing/include)
    endif()
endif()

if (CO_ASYNC_FIND_BEARSSL)
    find_package(BearSSL QUIET)
    if (TARGET BearSSL::bearssl)
        target_link_libraries(co_async PUBLIC BearSSL::bearssl)
    else()
        find_path(BEARSSL_INCLUDE_DIR NAMES bearssl.h)
        find_library(BEARSSL_LIBRARY NAMES libbearssl.so)
        if (NOT BEARSSL_INCLUDE_DIR OR NOT BEARSSL_LIBRARY)
            message(FATAL_ERROR "BearSSL not found")
        endif()
        target_link_libraries(co_async PUBLIC ${BEARSSL_LIBRARY})
        target_include_directories(co_async PUBLIC ${BEARSSL_INCLUDE_DIR})
    endif()
else()
    target_include_directories(co_async PUBLIC 3rd/bearssl/include)
endif()

find_package(Threads REQUIRED)
target_link_libraries(co_async PUBLIC Threads::Threads)

find_package(TBB REQUIRED COMPONENTS tbb REQUIRED)
target_link_libraries(co_async PUBLIC TBB::tbb)

if (CO_ASYNC_JEMALLOC)
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(JEMALLOC jemalloc)
    pkg_search_module(JEMALLOC REQUIRED jemalloc)
    include_directories(${JEMALLOC_INCLUDE_DIRS})
    target_link_libraries(co_async PUBLIC ${JEMALLOC_LIBRARIES})
endif()

if (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    file(GLOB example_sources examples/*.cpp)
    foreach(path ${example_sources})
        get_filename_component(name ${path} NAME_WE)
        add_executable(${name} ${path})
        if (CO_ASYNC_MODULE)
            enable_std_modules(${name})
        endif()
        target_link_libraries(${name} PRIVATE co_async)
    endforeach()
endif()

add_custom_target(format
    COMMAND clang-format -i ${implementation_sources} ${interface_sources}
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
