#set(CO_ASYNC_MODULE ON)
#set(CO_ASYNC_DEBUG ON)
#set(CO_ASYNC_PERF ON)
#set(CO_ASYNC_EXCEPT ON)
#set(CO_ASYNC_ZLIB ON)
#set(CO_ASYNC_STEAL ON)

if (CO_ASYNC_MODULE)
    cmake_minimum_required(VERSION 3.28)
else()
    cmake_minimum_required(VERSION 3.16)
endif()

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

project(co_async LANGUAGES CXX)

if (CO_ASYNC_CUDA)
    enable_language(CUDA)
endif()

if (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    if (MSVC)
        add_compile_options($<$<COMPILE_LANG_AND_ID:CXX,MSVC>:-utf-8>)
    endif()
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        add_compile_options($<$<COMPILE_LANG_AND_ID:CXX,GNU>:-Werror$<SEMICOLON>-Wall$<SEMICOLON>-Wextra$<SEMICOLON>-Wno-interference-size$<SEMICOLON>-Werror=return-type$<SEMICOLON>-Werror=unused-result$<SEMICOLON>-Werror=uninitialized$<SEMICOLON>-Wno-unused-parameter$<SEMICOLON>-Wno-exceptions$<SEMICOLON>-Werror=missing-declarations$<SEMICOLON>-Werror=missing-field-initializers$<SEMICOLON>-Wparentheses$<SEMICOLON>-Wconversion$<SEMICOLON>-Wsign-conversion$<SEMICOLON>-Wredundant-tags>)
        if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 10.0.0 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 11.0.0)
            add_compile_options($<$<COMPILE_LANG_AND_ID:CXX,GNU>:-fcoroutines$<SEMICOLON>-D__cplusplus=202002L>)
            if (IS_DIRECTORY /usr/include/c++/10)
                include_directories($<$<COMPILE_LANG_AND_ID:CXX,GNU>:/usr/include/c++/10>)
            endif()
        endif()
    elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        add_compile_options($<$<COMPILE_LANG_AND_ID:CXX,Clang>:-Werror$<SEMICOLON>-Wall$<SEMICOLON>-Wextra$<SEMICOLON>-Werror=return-type$<SEMICOLON>-Werror=unused-result$<SEMICOLON>-Werror=uninitialized$<SEMICOLON>-Wno-unused-parameter$<SEMICOLON>-Wno-exceptions$<SEMICOLON>-Werror=missing-declarations$<SEMICOLON>-Werror=missing-field-initializers$<SEMICOLON>-Wparentheses$<SEMICOLON>-Wconversion$<SEMICOLON>-Wsign-conversion>)
    endif()
endif()
if (CO_ASYNC_MODULE)
    include(cmake/clang_std_modules.cmake)
endif()

add_library(co_async OBJECT)
if (CO_ASYNC_MODULE)
    enable_std_modules(co_async)
endif()
file(GLOB_RECURSE interface_sources co_async/*.hpp)
file(GLOB_RECURSE implementation_sources co_async/*.cpp)
if (CO_ASYNC_MODULE)
    target_sources(co_async PUBLIC FILE_SET CXX_MODULES FILES ${interface_sources})
else()
    # target_sources(co_async PUBLIC FILE_SET HEADERS FILES ${interface_sources})
    # target_sources(co_async PUBLIC FILE_SET HEADERS FILES cmake/clang_std_modules_source/std.hpp)
    target_include_directories(co_async PUBLIC .)
endif()
target_sources(co_async PRIVATE ${implementation_sources})
if (NOT implementation_sources)
    target_sources(co_async PRIVATE scripts/dummy.cpp)
endif()
if (CO_ASYNC_DEBUG)
     target_compile_definitions(co_async PUBLIC CO_ASYNC_DEBUG)
endif()
if (CO_ASYNC_PERF)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_PERF)
endif()
if (CO_ASYNC_EXCEPT)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_EXCEPT)
endif()
if (CO_ASYNC_ZLIB)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_ZLIB)
    target_link_libraries(co_async PUBLIC z)
endif()
if (CO_ASYNC_STEAL)
    target_compile_definitions(co_async PUBLIC CO_ASYNC_STEAL)
endif()

if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    target_sources(co_async PRIVATE 3rd/liburing/liburing.cpp)
    target_include_directories(co_async PUBLIC 3rd/liburing/include)
    target_link_libraries(co_async PUBLIC bearssl)
endif()

if (PROJECT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    file(GLOB example_sources examples/*.cpp)
    foreach(path ${example_sources})
        get_filename_component(name ${path} NAME_WE)
        add_executable(${name} ${path})
        if (CO_ASYNC_MODULE)
            enable_std_modules(${name})
        endif()
        target_link_libraries(${name} PRIVATE co_async)
    endforeach()
endif()
